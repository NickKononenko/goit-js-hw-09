{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,gBAAiBF,SAASC,cAAc,qBACxCE,eAAgBH,SAASC,cAAc,oBACvCG,YAAaJ,SAASC,cAAc,uBAG9BI,EAAuDP,EAAvDC,KAAMO,EAAiDR,EAAjDI,gBAAiBK,EAAgCT,EAAhCK,eAAgBK,EAAgBV,EAAhBM,YA+B/C,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAI,CAAEH,WAAUC,UAEhBG,EAAI,CAAEJ,WAAUC,S,GAEjBA,E,IAtCPQ,QAAQC,IAAId,GAEZD,EAAKgB,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBAMN,IALA,IAAIC,EAAaC,OAAOnB,EAAgBoB,OACpCC,EAAYF,OAAOlB,EAAemB,OAClCE,EAASH,OAAOjB,EAAYkB,OAGvBG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAEhCpB,EADWoB,EACaL,GACrBM,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,EAAApC,GAASqC,OAAOC,QACd,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAGjDyB,OAAM,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,EAAApC,GAASqC,OAAOI,QACd,sBAAqCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAGjDa,GAAcG,EAEhBtB,EAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelayInput: document.querySelector('input[name=delay]'),\n  delayStepInput: document.querySelector('input[name=step]'),\n  amountInput: document.querySelector('input[name=amount]'),\n};\n\nconst { form, firstDelayInput, delayStepInput, amountInput } = refs;\n\nconsole.log(firstDelayInput);\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  let firstDelay = Number(firstDelayInput.value);\n  let delayStep = Number(delayStepInput.value);\n  let amount = Number(amountInput.value);\n  let position = 0;\n\n  for (let i = 1; i <= amount; i += 1) {\n    position = i;\n    createPromise(position, firstDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    firstDelay += delayStep;\n  }\n  form.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        res({ position, delay });\n      } else {\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelayInput","delayStepInput","amountInput","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$firstDelayInput","$ce04d3a99e08e73b$var$delayStepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","res","rej","shouldResolve","Math","random","setTimeout","console","log","addEventListener","event","preventDefault","firstDelay","Number","value","delayStep","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.834a3c69.js.map"}